openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: Local Testing Express Server
    url: http://localhost:8080
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/WalletFox/WalletFoxAPI/1.0.0
info:
  description:  |
    # WalletFox API Specifcation
    Documentation for the WalletFox Platform API.
    
    ## Using this documentation
    - Required parameters are marked with an asterisk (*)
    - PATCH requests
      - Not all model parameters are required in the request body, only the values you wish to update.
    - API Request methods are separated into different catagories seen below, however there is some overlap, for example, /Wallet-Debts is related to **Payments** and **Wallets**. For all API methods look to the **All** catagory.
  
    ## Common Error Codes
      - 400
        - Bad request, the parameters provided are either not following the specified format (type) or there are some required request parameters that are missing in the request. Returns a json object of the incorrect parameter(s) 
      - 404
        - The requested resource could not be found
      - 500
        - Nothing was wrong with the request, however, there was a server error with the back-end application.
  version: "1.0.0"
  title: WalletFox API
  contact:
    email: samcavicchi@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Wallet 
    description: Wallet related methods
  - name: Payment 
    description: Payment related methods
  - name: User 
    description: User related methods
  - name: All 
    description: All API methods
paths:
  /users/{userId}:
    get:
      tags:
        - User 
        - All 
      summary: Get a user by ID
      operationId: getUser
      description: Get a specific user from the API by specifying the user's ID. Returns the user id, name. If the user has sufficient permissions it will also return the user email.
      parameters:
        - in: path
          name: userId
          description: The user's unique ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '404':
          description: 'User not found'
        '400':
          description: 'Bad Request'
        '500':
          description: 'Server error'
    patch:
      tags:
      - User 
      - All 
      summary: Update a user's information
      description:  |
        Update a specific user's information by supplying the user id in the request path, and by supplying the updated values in the request body.
        
        **Not all model parameters are required in the request body, only the values you wish to update.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters: 
        - in: path
          required: true
          name: userId
          description: The user's unique ID
          schema: 
            type: integer
      responses: 
        '204':
          description: 'Updated, no content'
        '400':
          description: 'Bad Request'
        '401':
          description: 'Insufficient permissions to update this user'
        '404':
          description: 'User not found'
        '500':
          description: 'Server error'
    delete:
      tags:
      - User 
      - All 
      summary: Delete a user
      description: |
        Delete a user from the database
        
        Automatically deletes all data except the user id and isActive boolean which is set to false.

      parameters: 
        - in: path
          required: true
          name: userId
          description: The user's unique id
          schema: 
            type: integer
      responses: 
        '204':
          description: 'Deleted, no content'
        '401':
          description: 'Insufficient permissions to delete this user'
        '400':
          description: 'Bad Request'
        '404':
          description: 'User not found'
        '500':
          description: 'Server error'
  /users:
    get:
      tags:
      - User 
      - All 
      summary: Search through users resource
      operationId: searchUsers
      description: |
        By passing in the appropriate options, you can search for a specific user or group of users. 
        
        For example, if you wish to find all users in a wallet you can put in the request parameters the walletId
      parameters:
        - in: query
          name: userName
          description: Search by the user's name
          required: false
          schema:
            type: string
        - in: query
          name: userEmail
          description: Search by the user's email
          required: false
          schema:
            type: string
        - in: query
          name: walletId
          description: Search by the wallet and return wallet members as user id
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: Array of search results matching criteria, returns empty if none found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: 'Bad Request'
        '500':
          description: 'Server error'
    post:
      tags:
        - User 
        - All 
      summary: Create a user
      operationId: addUser
      description: Creates a new user on the database
      responses:
        '201':
          description: user created
          headers: 
            Location:
              schema:
                type: string
              description: 'The URI location of the created user'
            
        '400':
          description: 'Bad Request'
        '500':
          description: 'Server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        description: User to add
  /wallets:  
    get:
      tags:
      - Wallet 
      - All 
      summary: Get all the wallets that the user is a member of
      operationId: getWallet
      description: |
        Gets all the wallets as an array where the user has a member relation with the wallet id.
      parameters: 
        - in: query
          name: userId
          description: The id of the user who is a member of the wallets
          required: true
          schema:
            type: string
      responses: 
        '200':
          description: Array of wallets matching criteria, returns empty if none found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletChangeable'
        '400':
          description: 'Bad Request'
        '500':
          description: 'Server error'
    post:
      tags:
      - All 
      - Wallet 
      summary: Create a new wallet
      operationId: addWallet
      description: Adds a new wallet to the database and automatically creates the wallet member relation for the user
      parameters:
        - in: query
          required: true
          name: userId
          description: The ID of the User who created this wallet
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewWallet'
        description: Wallet to create
      responses:
        '201':
          description: 'wallet created'
          headers: 
            Location:
              schema:
                type: string
              description: 'The URI location of the created wallet'
        '400':
          description: 'Bad Request'
        '500':
          description: 'Server error'
      
  /wallets/{walletId}:
    get:
      tags:
      - Wallet 
      - All 
      summary: Get a wallet by ID
      operationId: getUser
      description: Get a specific wallet from the database by specifying the wallet's ID
      parameters:
        - in: path
          name: walletId
          description: The wallet's unique ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '404':
          description: 'Wallet does not exist'
        '500':
          description: 'Server error'
    patch:
      tags:
      - Wallet 
      - All 
      summary: Update a wallet's information
      description:  |
        Update a specific wallet's information by supplying the wallet id in the request path, and by supplying the updated values in the request body.
        
        **Not all model parameters are required in the request body, only the values you wish to update.**
        
        # Permissions
        
        Only a wallet member who is admin may change a wallet's information
        

      requestBody:
        description: The wallet's information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Wallet'
      parameters: 
        - in: path
          required: true
          name: walletId
          description: The wallet's unique ID
          schema: 
            type: integer
      responses: 
        '204':
          description: 'Updated, no content'
        '400':
          description: 'Bad Request'
        '401':
          description: 'Insufficient permissions to edit this wallet, make sure you are an admin.'
        '404':
          description: 'Wallet not found'
        '500':
          description: 'Server error'
    delete:
      tags:
      - Wallet 
      - All 
      summary: Delete a wallet
      operationId: deleteWallet
      description: |
        Delete the specified wallet including all associated wallet members, payments, payment debts and wallet debts. 
        # Permissions
        
        Only a wallet member with admin privileges can delete a wallet.
      parameters:
        - in: path
          required: true
          name: walletId
          description: The ID of the wallet to be deleted
          schema:
            type: integer
      responses:
        '204':
          description: 'Wallet deleted, no content'
        '400':
          description: 'Bad Request'
        '401':
          description: 'Insufficient permissions to delete this wallet'
        '404':
          description: 'Wallet not found'
        '500':
          description: 'Server error'
  /payment-debts:
    get:
      tags:
      - Payment 
      - All 
      summary: Search through payment debts
      operationId: searchPaymentDebts
      description: Search for payment debts by passing through the correct search parameters
      parameters: 
        - in: query
          name: walletId
          description: The id of the wallet in which the payment was made
          required: false
          schema:
            type: string
        - in: query
          name: userOwing
          description: The user id who owes in the payment debts
          required: false
          schema:
            type: string
        - in: query
          name: payee
          description: The user id of the user who will be paid by the payment debts
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses: 
        '200':
          description: 'Array of all payment debts matching criteria, returns empty if none found'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentDebt'
        '400':
          description: 'Bad Request'
        '500':
          description: 'Server error'
    post:
      tags:
      - Payment 
      - All 
      summary: Create a new payment debt
      operationId: addPaymentDebt
      description: Adds a new payment debt to an existing payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPaymentDebt'
        description: Payment Debt to add
      responses:
        '201':
          description: 'Payment created'
          headers: 
            Location:
              schema:
                type: string
              description: 'The URI location of the created payment debt'
        '400':
          description: 'Bad request'
        '500':
          description: 'Server error'
  /payment-debts/{paymentDebtId}:
    delete:
      tags:
      - Payment 
      - All 
      summary: Delete a payment debt
      operationId: deletePaymentDebt
      description: |
        Deletes a specific payment debt from a payment
        
        # Permissions
        Only the payment payee can delete the corresponding payment debt
      parameters:
        - in: path
          required: true
          name: paymentDebtId
          description: The payment debt id of the debt to be deleted
          schema:
            type: integer
      responses:
        '204':
          description: Payment debt deleted, no content
        '400':
          description: 'Bad Request'
        '404':
          description: 'Payment debt not found'
        '500':
          description: 'Server error'
    patch:
      tags:
      - Payment 
      - All 
      summary: Update a payment debt
      description:  |
        Update a specific payment debt's information on a payment by supplying the debt id in the request path, and by supplying the updated values in the request body.
        
        **Not all model parameters are required in the request body, only the values you wish to update.**
        
        # Permissions
        Only the payment payee can delete the corresponding payment debt
      operationId: updatePaymentDebt
      parameters:
        - in: path
          required: true
          name: paymentDebtId
          description: The payment id of the payment to be deleted
          schema:
            type: integer
      requestBody:
        description: The new payment debt information to be updated
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeablePaymentDebt'
      responses:
        '204':
          description: 'Payment updated, no content'
        '400':
          description: 'Bad Request'
        '404':
          description: 'Payment not found'
        '500':
          description: 'Server error'
  /payments:
    get:
      tags:
        - Payment 
        - Wallet 
        - All 
      summary: Search through payments
      operationId: searchPayments
      description: Search for payments by passing through the correct search parameters
      parameters: 
        - in: query
          name: walletId
          description: The id of the wallet in which the payment was made
          required: false
          schema:
            type: string
        - in: query
          name: payee
          description: The user id of the user who made the payment
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses: 
        '200':
          description: Array of all payments matching criteria, returns empty if none found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '400':
          description: 'Bad Request'
        '500':
          description: 'Server error'
    post:
      tags:
      - Payment 
      - Wallet 
      - All 
      summary: Create a new payment
      operationId: addPayment
      description: |
        Adds a new payment to a specified wallet.
        
        **The front-end application will create the corresponding payment debts, as the payment does not hold any money values.**
      responses:
        '201':
          description: 'Payment created'
          headers: 
            Location:
              schema:
                type: string
              description: 'The URI location of the created payment'
        '400':
          description: 'Bad Request'
        '404':
          description: 'Wallet / Payee not found'
        '500':
          description: 'Server error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPayment'
        description: Payment to add
  /payments/{paymentId}:
    delete:
      tags:
      - Payment 
      - Wallet 
      - All 
      summary: Delete a payment
      operationId: deletePayment
      description: |
        Deletes a specific payment from a wallet
        
        # Permissions 
        Only the payee can initiate this request
      parameters:
        - in: path
          required: true
          name: paymentId
          description: The payment id of the payment to be deleted
          schema:
            type: integer
      responses:
        '204':
          description: Payment deleted, no content
        '400':
          description: 'Bad Request'
        '404':
          description: 'Payment not found'
        '500':
          description: 'Server error'
    patch:
      tags:
      - Payment 
      - Wallet 
      - All 
      summary: Update a payment
      operationId: updatePayment
      description:  |
        Update a specific payment's information by supplying the payment id in the request path, and by supplying the updated values in the request body.
        
        **Not all model parameters are required in the request body, only the values you wish to update.**
        
        # Permissions 
        Only the payee can initiate this request
      parameters:
        - in: path
          required: true
          name: paymentId
          description: The payment id of the payment to be updated
          schema:
            type: integer
      requestBody:
        description: The new payment information to be updated
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/ChangablePayment'
      responses:
        '204':
          description: 'Payment updated, no content'
        '400':
          description: 'Bad Request'
        '404':
          description: 'Payment not found'
        '500':
          description: 'Server error'
  /wallet-debts:
    get:
      tags:
      - All 
      - Wallet 
      - Payment 
      summary: Search through wallet debts
      operationId: searchWalletDebts
      description: |
        Search through all wallet debts given the correct search parameters
      parameters:
        - in: query
          name: walletId
          description: |
            Find the wallet-debts for the specified wallet id
          required: false
          schema:
            type: integer
        - in: query
          name: userId
          description: |
            Find the wallet-debts where the user is involved in the transaction
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Returns an array of all wallet-debts matching the criteria supplied, returns empty if none found
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletDebt'
        '400':
          description: 'Bad Request'
        '500':
          description: 'Server error'
    post:
      tags:
      - Payment 
      - Wallet 
      - All 
      summary: Generate wallet debts
      operationId: generateWalletDebts
      description: Tells the back end api to generate all wallet debts for all outstanding payments and payment debts for this wallet, returns a JSON array of the generated result
      parameters:
        - in: query
          required: true
          name: walletId
          description: The wallet id that we want to generate wallet debts for
          schema:
            type: integer
      responses:
        '204':
          description: 'Valid request but no wallet debts were created because no payments could be found'
        '201':
          description: 'Debts created'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewWalletDebt'
        '400':
          description: 'Bad Request'
        '404':
          description: 'Wallet not found'
        '500':
          description: 'Server error'
  /wallet-debts/{walletDebtId}:
    patch:
      tags:
      - All 
      - Wallet 
      - Payment 
      summary: Update a wallet debt
      operationId: updateWalletDebt
      description:  |
        Updates a specific wallet debt from a wallet by supplying the wallet debt id in the request path, and by supplying the updated values in the request body.
        
        **Not all model parameters are required in the request body, only the values you wish to update.**
        
        # Permissions
        Only the userToBePaid can update the wallet debt value / mark it has paid
      parameters:
        - in: path
          required: true
          name: walletDebtId
          description: The wallet debt id of the payment to be updated
          schema:
            type: integer
      requestBody:
        description: The new wallet debt information to be updated
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeableWalletDebt'
      responses:
        '204':
          description: 'Debt updated updated, no content'
        '400':
          description: 'Bad Request'
        '404':
          description: 'Wallet Debt not found'
        '500':
          description: 'Server error'
  /wallet-members:
    get:
      tags:
      - Wallet 
      - User 
      - All 
      summary: Search through wallet members
      operationId: searchWalletDebts
      description: Search through all wallet members given the correct search parameters, and return a select few results
      parameters:
        - in: query
          name: walletId
          description: |
            Find the wallet members for the specified wallet id
          required: false
          schema:
            type: integer
        - in: query
          name: userId
          description: |
            Find the wallet members for the specified user id
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Returns an array of all wallet members matching the criteria supplied, returns empty if none found
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletMember'
        '400':
          description: 'Bad Request'
        '500':
          description: 'Server error'
    post:
      description: |
        Adds an existing user to a specific wallet
        
        # Permissions
        
        Wallet Members can create new wallet members, only wallet member admins can create new wallet member admins.
      tags:
        - User 
        - Wallet 
        - All 
      summary: Adds a wallet member
      operationId: addUser
      parameters:
        - in: query
          required: true
          name: userId
          description: The user id to be added as a wallet member
          schema: 
            type: integer
      responses:
        '201':
          description: Wallet member created
          headers: 
            Location:
              schema:
                type: string
              description: 'The URI location of the created wallet member'
        '400':
          description: 'Bad Request'
        '409':
          description: This user is already a member of this wallet
        '500':
          description: 'Server error'
  /wallet-members/{walletMemberId}:
    patch:
      tags:
      - All 
      - Wallet 
      - Payment 
      summary: Update a wallet debt
      operationId: updateWalletDebt
      description:  |
        Updates a wallet member, usually used to create a wallet admin or remove admin privileges.
        
        # Privileges
        
        Only a current wallet member with admin privileges can patch wallet members
      parameters:
        - in: path
          required: true
          name: walletMemberId
          description: The wallet debt id of the payment to be updated
          schema:
            type: integer
      requestBody:
        description: The new wallet debt information to be updated
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeableWalletMember'
      responses:
        '204':
          description: 'Debt updated updated, no content'
        '400':
          description: 'Bad Request'
        '404':
          description: 'Wallet Debt not found'
        '500':
          description: 'Server error'
    delete:
      tags:
      - User 
      - Wallet 
      - All 
      summary: Remove a user from a wallet
      description: |
        Delete a wallet member. If this member is the last of the wallet members, the wallet will be automatically deleted. 
        
        # Permissions
        Only the user can delete themselves, however wallet member admins can delete other wallet members.
      parameters: 
        - in: path
          required: true
          name: walletMemberId
          description: The wallet member's unique ID
          schema: 
            type: integer
      responses: 
        '204':
          description: 'Deleted, no content'
        '400':
          description: 'Bad Request'
        '404':
          description: 'Wallet member not found'
        '500':
          description: 'Server error'
      
components:
  schemas:
    PublicUser: 
      description: The public User resource
      type: object
      required: 
        - id
        - name
        - email
      properties:
        id:
          type: integer
          format: uuid
          example: 1234 
        name:
          description: The user's full name to identify themselves to friends within the platform
          type: string
          example: "John Doe"
        email:
          description: The user's email
          type: string
          example: "John@example.com"
    NewUser:
      description: The default User resource
      type: object
      required: 
        - name
        - email
        - password
      properties:
        name:
          description: The user's full name to identify themselves to friends within the platform
          type: string
          example: "John Doe"
        email:
          description: The user's email
          type: string
          example: "John@example.com"
        password:
          description: The user's password
          type: string
          example: "mypassword1"
    User:
      description: The default User resource
      type: object
      required: 
        - id
        - name
        - email
        - password
      properties:
        id:
          type: integer
          format: uuid
          example: 1234 
        name:
          description: The user's full name to identify themselves to friends within the platform
          type: string
          example: "John Doe"
        email:
          description: The user's email
          type: string
          example: "John@example.com"
        password:
          description: The user's password
          type: string
          example: "mypassword1"
        isActive:
          description: True if the user has not deleted their account
          type: boolean
          example: 'true'
    WalletChangeable:
      description: The resource that acts as a shared wallet between wallet members. Contains payments, payment debts, wallet debts and wallet members
      type: object
      required: 
        - name
        - currency
      properties:
        name:
          type: string
          example: "Group House"
        currency: 
          type: string
          format: currency
          example: "USD"
    NewWallet:
      description: The resource that acts as a shared wallet between wallet members. Contains payments, payment debts, wallet debts and wallet members
      type: object
      required: 
        - name
        - currency
      properties:
        name:
          type: string
          example: "Group House"
        currency: 
          type: string
          format: currency
          example: "USD"
    Wallet:
      description: The resource that acts as a shared wallet between wallet members. Contains payments, payment debts, wallet debts and wallet members
      type: object
      required: 
        - id
        - name
        - currency
      properties:
        id:
          type: integer
          format: uuid
          example: 1234 
        name:
          type: string
          example: "Group House"
        currency: 
          type: string
          format: currency
          example: "USD"

    ChangeableWalletMember:
      type: object
      description: Entity relation between Users and Wallets resources
      required: 
        - isAdmin
      properties:
        isAdmin:
          type: boolean
          example: 'false'
    WalletMember:
      type: object
      description: Entity relation between Users and Wallets resources
      required: 
        - id
        - userId
        - walletId
        - isAdmin
      properties:
        id:
          type: integer
          format: uuid
          example: 1234 
        userId:
          type: integer
          format: uuid
          example: 1234 
          description: The ID of the User which is a member
        walletId:
          type: integer
          format: uuid
          example: 1234 
          description: The ID of the Wallet in which the User is a member of
        isAdmin:
          type: boolean
          example: 'false'
    ChangablePayment:
      description: A Payment resource that details a real-life purchase and contains all owing values.
      type: object
      properties:
        paymentDate: 
          type: string
          format: date
          description: The date in which the payment was made by the user
        description:
          type: string
          description: The description of the payment
    NewPayment:
      description: A Payment resource that details a real-life purchase and contains all owing values.
      type: object
      required: 
        - id
        - walletId
        - payee
        - paymentDate
      properties:
        walletId:
          type: integer
          format: uuid
          description: The ID of the wallet which the payment is attached to
        payee:
          type: integer
          format: uuid
          description: The ID of the user who made the payment
        isPaid: 
          type: boolean
          description: True if the payment has been made, this value is set by the backend once all Wallet Debts have been paid
        paymentDate: 
          type: string
          format: date
          description: The date in which the payment was made by the user
        description:
          type: string
          description: The description of the payment
    Payment:
      description: A Payment resource that details a real-life purchase and contains all owing values.
      type: object
      required: 
        - id
        - walletId
        - payee
        - paymentDate
      properties:
        id:
          type: integer
          format: uuid
          example: 1234 
        walletId:
          type: integer
          format: uuid
          description: The ID of the wallet which the payment is attached to
        payee:
          type: integer
          format: uuid
          description: The ID of the user who made the payment
        isPaid: 
          type: boolean
          description: True if the payment has been made, this value is set by the backend once all Wallet Debts have been paid
        paymentDate: 
          type: string
          format: date
          description: The date in which the payment was made by the user
        description:
          type: string
          description: The description of the payment
    ChangeablePaymentDebt:
      description: A single debt owed to a single payment, a payment debt cannot exist without a payment
      type: object
      required: 
        - amount
      properties:
        amount:
          type: number
          example: 22.50
          description: The amount of money owed in this debt
    NewPaymentDebt:
      description: A single debt owed to a single payment, a payment debt cannot exist without a payment
      type: object
      required: 
        - paymentId
        - userOwing
        - amount
      properties:
        paymentId:
          type: integer
          format: uuid
          example: 1234
          description: The ID of the payment in which this debt is owed to  
        userOwing:
          type: integer
          format: uuid
          example: 1234 
          description: The ID of the user who owe's this amount to the original Payment
        amount:
          type: number
          example: 22.50
          description: The amount of money owed in this debt
    PaymentDebt:
      description: A single debt owed to a single payment, a payment debt cannot exist without a payment
      type: object
      required: 
        - id
        - paymentId
        - userOwing
        - amount
      properties:
        id:
          type: integer
          format: uuid
          example: 1234 
        paymentId:
          type: integer
          format: uuid
          example: 1234
          description: The ID of the payment in which this debt is owed to  
        userOwing:
          type: integer
          format: uuid
          example: 1234 
          description: The ID of the user who owe's this amount to the original Payment
        amount:
          type: number
          example: 22.50
          description: The amount of money owed in this debt
    ChangeableWalletDebt:
      description: A debt created by the backend appliction that can be updated by the user to be paid
      type: object
      required: 
        - amount
        - isPaid
      properties:
        amount:
          type: integer
          format: uuid
          description: The amount owed in this debt
        isPaid:
          type: boolean
          format: uuid
          description: Set to true if both users (userInDebt and userToBePaid) have confirmed payment of this wallet debt
    NewWalletDebt:
      description: A debt created by the backend appliction. These debts are required to be paid to settle all wallet member's debts and owings.
      type: object
      required: 
        - walletId
        - userInDebt
        - userToBePaid
        - amount
        - isPaid
      properties:
        walletId:
          type: integer
          format: uuid
          description: The wallet that the wallet debt is attached to
        userInDebt:
          type: integer
          format: uuid
          description: The user who owe's money on this debt
        userToBePaid:
          type: integer
          format: uuid
          description: The user who will receive money on payment of this debt
        amount:
          type: integer
          format: uuid
          description: The amount owed in this debt
        isPaid:
          type: boolean
          format: uuid
          description: Set to true if both users (userInDebt and userToBePaid) have confirmed payment of this wallet debt
    WalletDebt:
      description: A debt created by the backend appliction. These debts are required to be paid to settle all wallet member's debts and owings.
      type: object
      required: 
        - id
        - walletId
        - userInDebt
        - userToBePaid
        - amount
        - isPaid
      properties:
        id:
          type: integer
          format: uuid
          example: 1234 
        walletId:
          type: integer
          format: uuid
          description: The wallet that the wallet debt is attached to
        userInDebt:
          type: integer
          format: uuid
          description: The user who owe's money on this debt
        userToBePaid:
          type: integer
          format: uuid
          description: The user who will receive money on payment of this debt
        amount:
          type: integer
          format: uuid
          description: The amount owed in this debt
        isPaid:
          type: boolean
          format: uuid
          description: Set to true if both users (userInDebt and userToBePaid) have confirmed payment of this wallet debt