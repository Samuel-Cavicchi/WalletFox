openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/WalletFox/WalletFoxAPI/1.0.0
info:
  description: API Specification for WalletFox platform & app
  version: "1.0.0"
  title: WalletFox API
  contact:
    email: samcavicchi@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /users{userId}:
    get:
      summary: Get a user by ID
      operationId: getUser
      description: Get a specific user from the API by specifying the user's ID
      parameters:
        - in: path
          name: userId
          description: The user's unique ID
          required: True
          schema:
            type: integer
    patch:
      summary: Update a user's information
      requestBody:
        description: The user's information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses: 
        '204':
          description: Updated, no content
        '400':
          description: Bad Request
        '404':
          description: User not found
  /users:
    get:
      summary: Search through users resource
      operationId: searchUsers
      description: |
        By passing in the appropriate options, you can search for a specific user
      parameters:
        - in: query
          name: userName
          description: The user's name
          required: false
          schema:
            type: string
        - in: query
          name: userEmail
          description: The user's email
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: Array of search results matching criteria, returns empty if none found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter
    post:
      summary: adds a user
      operationId: addUser
      description: Adds an user to the database
      responses:
        '201':
          description: user created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User to add
  /wallets:
    get:
      summary: Search through a user's wallets
      operationId: searchWallets
      description: Search for a specific wallet
      parameters: 
        - in: query
          name: walletName
          description: The name of the wallet
          required: false
          schema:
            type: string
        - in: query
          name: walletCurrency
          description: The currency of the wallet
          required: false
          schema:
            type: currency
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses: 
        '200':
        description: Array of wallets matching criteria, returns empty if none found
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Wallet'
        '400':
          description: Bad input parameters
  
components:
  schemas:
    User:
      description: The default User resource
      type: object
      required: 
        - id
        - name
        - email
        - password
      properties:
        id:
          type: integer
          format: uuid
          example: 1234 
        name:
          description: The user's full name to identify themselves to friends within the platform
          type: string
          example: "John Doe"
        email:
          description: The user's email
          type: string
          example: "John@example.com"
    Wallet:
      description: The resource that acts as a shared wallet between wallet members. Contains payments, payment debts, wallet debts and wallet members
      type: object
      required: 
        - id
        - name
        - currency
      properties:
        id:
          type: integer
          format: uuid
          example: 1234 
        name:
          type: string
          example: "Group House"
        currency: 
          type: string
          format: currency
          example: "USD"
    WalletMember:
      type: object
      description: Entity relation between Users and Wallets resources
      required: 
        - id
        - userId
        - walletId
      properties:
        id:
          type: integer
          format: uuid
          example: 1234 
        userId:
          type: integer
          format: uuid
          example: 1234 
          description: The ID of the User which is a member
        walletId:
          type: integer
          format: uuid
          example: 1234 
          description: The ID of the Wallet in which the User is a member of
    Payment:
      description: A Payment resource that details a real-life purchase and contains all owing values.
      type: object
      required: 
        - id
        - walletId
        - payee
        - paymentDate
      properties:
        id:
          type: integer
          format: uuid
          example: 1234 
        walletId:
          type: integer
          format: uuid
          description: The ID of the wallet which the payment is attached to
        payee:
          type: integer
          format: uuid
          description: The ID of the user who made the payment
        isPaid: 
          type: boolean
          description: True if the payment has been made, this value is set by the backend once all Wallet Debts have been paid
        paymentDate: 
          type: string
          format: date
          description: The date in which the payment was made by the user
        description:
          type: string
          description: The description of the payment
    PaymentDebt:
      description: A single debt owed to a single payment, a payment debt cannot exist without a payment
      type: object
      required: 
        - id
        - paymentId
        - userOwing
        - amount
      properties:
        id:
          type: integer
          format: uuid
          example: 1234 
        paymentId:
          type: integer
          format: uuid
          example: 1234
          description: The ID of the payment in which this debt is owed to  
        userOwing:
          type: integer
          format: uuid
          example: 1234 
          description: The ID of the user who owe's this amount to the original Payment
        amount:
          type: float
          example: 22.50
          description: The amount of money owed in this debt
    WalletDebt:
      type: object
      required: 
        - id
        - walletId
        - userInDebt
        - userToBePaid
        - amount
        - isPaid
      properties:
        id:
          type: integer
          format: uuid
          example: 1234 
        walletId:
          type: integer
          format: uuid
          description: The wallet that the wallet debt is attached to
        userInDebt:
          type: integer
          format: uuid
          description: The user who owe's money on this debt
        userToBePaid:
          type: integer
          format: uuid
          description: The user who will receive money on payment of this debt
        amount:
          type: integer
          format: uuid
          description: The amount owed in this debt
        isPaid:
          type: boolean
          format: uuid
          description: Set to true if both users (userInDebt and userToBePaid) have confirmed payment of this wallet debt